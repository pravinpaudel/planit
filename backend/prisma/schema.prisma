// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String      @id @default(uuid())
  email   String      @unique
  firstName    String @map("first_name")
  lastName String?    @map("last_name")
  password String 
  salt String
  tasks Task[]        @relation("UserTasks")
  refreshTokens RefreshToken[] @relation("UserRefreshTokens")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  user      User     @relation("UserRefreshTokens", fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  
  @@map("refresh_tokens")
}

model Task {
  id         String      @id @default(uuid())
  title       String
  description String 
  user     User       @relation("UserTasks", fields: [userId], references: [id]) 
  userId   String     @map("author_id")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  milestones Milestone[]

  // Roadmap sharing fields
  isPublic      Boolean   @default(false) @map("is_public")
  shareableLink String?   @unique @map("shareable_link") // Making it optional and unique
  
  // Self-relation for cloned roadmaps
  originalTaskId String?  @map("original_task_id") // Making it optional
  originalTask   Task?    @relation("ClonedTasks", fields: [originalTaskId], references: [id], onDelete: SetNull)
  clonedTasks    Task[]   @relation("ClonedTasks")
  
  @@map("tasks")
}

// Define status enum for milestones
enum MilestoneStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  AT_RISK
  DELAYED
}

model Milestone {
  id          String          @id @default(uuid())
  title       String
  description String
  task        Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String          @map("task_id")
  status      MilestoneStatus @default(NOT_STARTED) @map("status")
  deadline    DateTime   
  
  // Self-relation for parent-child hierarchy
  parentId    String?         @map("parent_id")
  parent      Milestone?      @relation("MilestoneHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Milestone[]     @relation("MilestoneHierarchy")

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("milestones")
}